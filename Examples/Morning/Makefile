# specify the problem filename stem
P=p

# the resulting full filename of the domain
PROBLEMFILE = $P.pddl

# specify the domain filename
D=d

# the resulting full filename of the domain
DOMAINFILE = $D.pddl

# the rule-compiler executable
RC=../../rc

# directory for model files generated by RC
MODELDIR=Models
TMPDIR=tmp

OBSMODEL=$D-observations.cpp $D-observations.h

###############################################################
# rules

# this target makes sure, that all intermediate files are kept
.SECONDARY:

all: $P-simulator $P-marginal $P-validator

# compile the simulator for a given problem file wrt. to the domain
$P-simulator: ${PROBLEMFILE} ${DOMAINFILE} ${OBSMODEL}
	@if [ ! -d ${MODELDIR} ]; then mkdir ${MODELDIR}; fi
	${RC} -d ${DOMAINFILE} -p $< -MS -w${MODELDIR}

$P-marginal: ${PROBLEMFILE} ${DOMAINFILE} ${OBSMODEL}
	@if [ ! -d ${MODELDIR} ]; then mkdir ${MODELDIR}; fi
	${RC} -d ${DOMAINFILE} -p $< -MM -C"-D USE_ACTION_ESTIMATION" -w${MODELDIR}

# compile the validator for a given problem file wrt. to the domain
$P-validator: ${PROBLEMFILE} ${DOMAINFILE} ${OBSMODEL}
	@if [ ! -d ${MODELDIR} ]; then mkdir ${MODELDIR}; fi
	${RC} -d ${DOMAINFILE} -p $< -MV -w${MODELDIR}

$P-analyzer: ${PROBLEMFILE} ${DOMAINFILE} ${OBSMODEL}
	@if [ ! -d ${MODELDIR} ]; then mkdir ${MODELDIR}; fi
	${RC} -d ${DOMAINFILE} -p $< -MA -w${MODELDIR}

s%: 
	@make ${TMPDIR}/$P-seed$@.states

# generate a simulated plan for a given random seed and the problem $P
# the seed is specified within the filename "%" 
${TMPDIR}/$P-seed%.plan: $P-simulator
	@if [ ! -d ${TMPDIR} ]; then mkdir ${TMPDIR}; fi
	@./$P-simulator -R$* > $@

# generates the sequence of states from a given plan
%.states: %.plan $P-validator
	@./p-validator -a $@ -v1 $< #> /dev/null 2> /dev/null

m%: ${TMPDIR}
	@if [ ! -d ${TMPDIR} ]; then mkdir ${TMPDIR}; fi
	@make ${TMPDIR}/$P-$*.filtered

# generate the output of a marginal filter run over a given set of observation data
${TMPDIR}/$P-%.filtered: data/%.dat $P-marginal
	@if [ ! -d ${TMPDIR} ]; then mkdir ${TMPDIR}; fi
	@cat $< |./$P-marginal > $@ #2>/dev/null

# generate the output of a marginal filter run over the given observation data
# "make ${TMPDIR}/$P-rlrlrl.filtered" will use "rlrlrl" as observation data (one char per line)
${TMPDIR}/$P-%.filtered: ${TMPDIR}
	@if [ ! -d ${TMPDIR} ]; then mkdir ${TMPDIR}; fi
	@echo $* |fold -w1 |./$P-marginal > $@ 2>/dev/null


clean:
	@rm -rf ${TMPDIR}
	@rm -rf ${MODELDIR}
	@rm -rf *-simulator *-validator *-marginal
